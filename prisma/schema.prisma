
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  avatar       String?
  role         Role          @default(USER)
  status       UserStatus    @default(ACTIVE)
  createdAt    DateTime      @default(now())
  activities   Activity[]
  notifications Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  date      DateTime
  read      Boolean
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Rule {
  id          String  @id @default(cuid())
  status      String  @unique
  description String
  min         Float
  max         Float
  isSystem    Boolean @default(false)
}

model StrategicPlan {
  id         String     @id @default(cuid())
  name       String
  startYear  Int
  endYear    Int
  version    String
  status     PlanStatus @default(DRAFT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  pillars    Pillar[]
  activities Activity[]
}

model Pillar {
  id              String         @id @default(cuid())
  title           String
  description     String?
  strategicPlan   StrategicPlan  @relation(fields: [strategicPlanId], references: [id], onDelete: Cascade)
  strategicPlanId String
  objectives      Objective[]
  createdAt       DateTime       @default(now())
}

model Objective {
  id          String      @id @default(cuid())
  statement   String
  pillar      Pillar      @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  pillarId    String
  initiatives Initiative[]
  createdAt   DateTime    @default(now())
}

model Initiative {
  id            String     @id @default(cuid())
  title         String
  description   String?
  owner         String
  collaborators String[]
  objective     Objective  @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  objectiveId   String
  activities    Activity[]
  createdAt     DateTime   @default(now())
}

model Activity {
  id              String          @id @default(cuid())
  title           String
  description     String?
  department      String
  responsible     User            @relation(fields: [responsibleId], references: [id])
  responsibleId   String
  startDate       DateTime
  endDate         DateTime
  status          String
  weight          Float
  progress        Float
  approvalStatus  ApprovalStatus  @default(PENDING)
  declineReason   String?
  initiative      Initiative?     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId    String?
  strategicPlan   StrategicPlan?  @relation(fields: [strategicPlanId], references: [id], onDelete: Cascade)
  strategicPlanId String?
  pendingUpdate   Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  updateHistory   UpdateHistory[]
}

model UpdateHistory {
  id            String         @id @default(cuid())
  activity      Activity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId    String
  status        String
  progress      Float
  comment       String
  date          DateTime       @default(now())
  approvalState ApprovalStatus @default(PENDING)
  userId        String
}


enum Role {
  ADMINISTRATOR
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PlanStatus {
  DRAFT
  PUBLISHED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}
