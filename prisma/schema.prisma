
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  avatar        String
  role          Role
  status        UserStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  activities    Activity[]
}

model Notification {
  id      String   @id @default(cuid())
  message String
  date    DateTime @default(now())
  read    Boolean
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rule {
  id          String    @id @default(cuid())
  status      String
  description String
  min         Float
  max         Float
  isSystem    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StrategicPlan {
  id        String    @id @default(cuid())
  name      String
  startYear Int
  endYear   Int
  version   String
  status    PlanStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pillars   Pillar[]
}

model Pillar {
  id              String         @id @default(cuid())
  title           String
  description     String?
  strategicPlanId String
  strategicPlan   StrategicPlan  @relation(fields: [strategicPlanId], references: [id], onDelete: Cascade)
  objectives      Objective[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Objective {
  id        String      @id @default(cuid())
  statement String
  pillarId  String
  pillar    Pillar      @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  initiatives Initiative[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Initiative {
  id           String     @id @default(cuid())
  title        String
  description  String?
  owner        String
  collaborators String[]
  objectiveId  String
  objective    Objective  @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  activities   Activity[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Activity {
  id              String         @id @default(cuid())
  title           String
  description     String
  department      String
  startDate       DateTime
  endDate         DateTime
  status          String
  weight          Int
  progress        Int
  pendingUpdate   String?
  approvalStatus  ApprovalStatus
  declineReason   String?
  initiativeId    String
  initiative      Initiative     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  responsibleId   String
  responsible     User           @relation(fields: [responsibleId], references: [id], onDelete: Restrict)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum Role {
  ADMINISTRATOR
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PlanStatus {
  DRAFT
  PUBLISHED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}
