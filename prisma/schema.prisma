
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model StrategicPlan {
  id        String    @id @default(cuid())
  name      String
  startYear Int
  endYear   Int
  version   String
  status    PlanStatus @default(DRAFT)
  pillars   Pillar[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Pillar {
  id              String         @id @default(cuid())
  title           String
  description     String?
  strategicPlan   StrategicPlan? @relation(fields: [strategicPlanId], references: [id], onDelete: Cascade)
  strategicPlanId String?
  objectives      Objective[]
}

model Objective {
  id        String   @id @default(cuid())
  statement String
  pillar    Pillar?  @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  pillarId  String?
  initiatives Initiative[]
}

model Initiative {
  id          String   @id @default(cuid())
  title       String
  description String?
  owner       String?
  objective   Objective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  objectiveId String?
  activities  Activity[]
}

model Activity {
  id             String         @id @default(cuid())
  title          String
  description    String
  department     String
  responsible    String
  startDate      DateTime
  endDate        DateTime
  status         String
  weight         Float
  progress       Float
  approvalStatus ApprovalStatus @default(PENDING)
  declineReason  String?
  pendingUpdate  Json?
  initiative     Initiative?    @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId   String?
  lastUpdated    DateTime?      @updatedAt
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  avatar        String?
  role          Role           @default(USER)
  status        UserStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now())
  notifications Notification[]
  Activity      Activity[]
}

model Rule {
  id          String  @id @default(cuid())
  status      String
  description String
  min         Float
  max         Float
  isSystem    Boolean @default(false)
}

model Notification {
  id      String  @id @default(cuid())
  message String
  date    DateTime
  read    Boolean @default(false)
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

enum Role {
  ADMINISTRATOR
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PlanStatus {
  DRAFT
  PUBLISHED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}
