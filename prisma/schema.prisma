
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StrategicPlan {
  id        String    @id @default(cuid())
  name      String
  startYear Int
  endYear   Int
  version   String
  status    PlanStatus @default(DRAFT)
  pillars   Pillar[]
  activities Activity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Pillar {
  id              String         @id @default(cuid())
  title           String
  description     String?
  strategicPlan   StrategicPlan? @relation(fields: [strategicPlanId], references: [id], onDelete: Cascade)
  strategicPlanId String?
  objectives      Objective[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Objective {
  id          String      @id @default(cuid())
  statement   String
  pillar      Pillar?     @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  pillarId    String?
  initiatives Initiative[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Initiative {
  id            String     @id @default(cuid())
  title         String
  description   String?
  owner         String
  collaborators String[]
  objective     Objective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  objectiveId   String?
  activities    Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id              String         @id @default(cuid())
  title           String
  description     String?
  department      String
  responsible     User           @relation(fields: [responsibleId], references: [id])
  responsibleId   String
  startDate       DateTime
  endDate         DateTime
  status          String
  weight          Float
  progress        Float
  updates         Json[]
  pendingUpdate   Json?
  approvalStatus  ApprovalStatus @default(PENDING)
  declineReason   String?
  initiative      Initiative?    @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId    String?
  strategicPlan   StrategicPlan? @relation(fields: [strategicPlanId], references: [id])
  strategicPlanId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  avatar        String
  role          Role
  status        UserStatus
  notifications Notification[]
  activities    Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String   @id @default(cuid())
  message String
  date    DateTime
  read    Boolean
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id          String  @id @default(cuid())
  status      String  @unique
  description String
  min         Float
  max         Float
  isSystem    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMINISTRATOR
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PlanStatus {
    DRAFT
    PUBLISHED
}

enum ApprovalStatus {
    PENDING
    APPROVED
    DECLINED
}
